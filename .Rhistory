library(ggplot2)
library(dplyr)
library(shiny)
national <- read.csv("data/arrests_national.csv", stringsAsFactors = FALSE)
state_and_national <- read.csv("data/estimated_crimes.csv", stringsAsFactors = FALSE)
state <- state_and_national[23:1144,]
year_range <- range(state$year)
my_ui <- fluidPage(
titlePanel("Crimes Rates in the US"),
sidebarLayout(
sidebarPanel(
sliderInput("year_choice", label = "Range of years", min = year_range[1],
max = year_range[2],
value = year_range),
checkboxInput("smooth", label=strong("Show Trendline"), value=TRUE),
selectInput("data_by", label="Data By", choices=c("violent_crime",
"homicide","rape_legacy",
"rape_revised","robbery",
"aggravated_assault",
"poverty_crime","burglary",
"larceny","motor_vehicle_theft"))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot", click = "plot_click"),
tabPanel("Table", tableOutput("table"),
br(),
p()),
tabPanel("Plot", plotOutput("plot2")),
tabPanel("Plot", plotOutput("plot3")),
tabPanel("Plot", plotOutput("plot4"))
)
)
)
)
)
shinyUI(my_ui)
library(ggplot2)
library(dplyr)
library(shiny)
national <- read.csv("data/arrests_national.csv", stringsAsFactors = FALSE)
state_and_national <- read.csv("data/estimated_crimes.csv", stringsAsFactors = FALSE)
state <- state_and_national[23:1144,]
my_server <- function(input, output) {
filtered <- reactive({
data <- state %>%
filter(year > input$year_range[1] & year < input$year_range[2])
return(data)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x = state_abbr, y = population, color = year)) +
geom_point()
if(input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
return(p)
})
}
shinyServer(my_server)
library(shiny)
# Loaded the server R script.
source("server.R")
# Loaded the UI R script.
source("ui.R")
# Created shiny app using the source server and UI.
shinyApp(ui = my_ui, server = my_server)
runApp()
View(state)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
state_abbreviations <- unique(state$state_abbr,incomparables = FALSE)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
statistics <- group_by(state, state_abbr) %>%
summarize(
min_violent_crime = min(violent_crime, na.rm = TRUE),
average_violent_crime = mean(violent_crime, na.rm = TRUE),
median_violent_crime = median(violent_crime, na.rm = TRUE),
max_violent_crime = max(violent_crime, na.rm = TRUE),
min_homicide = min(homicide, na.rm = TRUE),
average_homicide = mean(homicide, na.rm = TRUE),
median_homicide = median(homicide, na.rm = TRUE),
max_homicide = max(homicide, na.rm = TRUE),
min_rape_legacy = min(rape_legacy, na.rm = TRUE),
average_rape_legacy = mean(rape_legacy, na.rm = TRUE),
median_rape_legacy = median(rape_legacy, na.rm = TRUE),
max_rape_legacy = max(rape_legacy, na.rm = TRUE),
min_rape_revised = min(rape_revised, na.rm = TRUE),
average_rape_revised = mean(rape_revised, na.rm = TRUE),
median_rape_revised = median(rape_revised, na.rm = TRUE),
max_rape_revised = max(rape_revised, na.rm = TRUE),
min_robbery = min(robbery, na.rm = TRUE),
average_robbery = mean(robbery, na.rm = TRUE),
median_robbery = median(robbery, na.rm = TRUE),
max_robbery = max(robbery, na.rm = TRUE),
min_aggravated_assault = min(aggravated_assault, na.rm = TRUE),
average_aggravated_assault = mean(aggravated_assault, na.rm = TRUE),
median_aggravated_assault = median(aggravated_assault, na.rm = TRUE),
max_aggravated_assault = max(aggravated_assault, na.rm = TRUE),
min_property_crime = min(property_crime, na.rm = TRUE),
average_property_crime = mean(property_crime, na.rm = TRUE),
median_property_crime = median(property_crime, na.rm = TRUE),
max_property_crime = max(property_crime, na.rm = TRUE),
min_burglary = min(burglary, na.rm = TRUE),
average_burglary = mean(burglary, na.rm = TRUE),
median_burglary = median(burglary, na.rm = TRUE),
max_burglary = max(burglary, na.rm = TRUE),
min_larceny = min(larceny, na.rm = TRUE),
average_larceny = mean(larceny, na.rm = TRUE),
median_larceny = median(larceny, na.rm = TRUE),
max_larceny = max(larceny, na.rm = TRUE),
min_motor_vehicle_theft = min(motor_vehicle_theft, na.rm = TRUE),
average_motor_vehicle_theft = mean(motor_vehicle_theft, na.rm = TRUE),
median_motor_vehicle_theft = median(motor_vehicle_theft, na.rm = TRUE),
max_motor_vehicle_theft = max(motor_vehicle_theft, na.rm = TRUE))
View(statistics)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(state)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
state[4]
mean(state[4], na.rm = TRUE)
meadian(state[4], na.rm = TRUE)
median(state[4], na.rm = TRUE)
min(state[5],na.rm = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
