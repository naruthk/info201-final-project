summer_break <- as.Date("9june2018", "%d%b%Y")
# Question 4.2 - Current date
today <- Sys.Date()
# Question 4.3 - Represents how many days from the current date until break
days_to_break <- paste(summer_break - today, "days until summer!")
print(days_to_break)
# Question 4.4 - Returns a character string representing number of days from today
# until my next birthday
make_birthday_intro <- function(name, age, date) {
# If person's birthday has passed, then we consider the next year by adding 360
days_from_now_until_next_birthday <- if((date - Sys.Date()) > 0) (date - Sys.Date()) else ((Sys.Date() + 360) - date)
return(paste("Hello, my name is", name, "and I'm", age, "years old. In", days_from_now_until_next_birthday, "days I'll be", age + 1))
}
# Question 4.5 -
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("9feb2018", "%d%b%Y"))
print(my_bday_intro)
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Exercise 1: Shiny basics
# Install and load the `shiny` package
install.packages("shiny")
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput('price', label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput('quantity', label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
strong('Cost'),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput('cost')
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output){
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
return(paste0('$', input$price * input$quantity))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Exercise 2: Shiny UI layout
# load required libraries
library(shiny)
# Define a UI variable, assigning it a `navbarPage()` layout.
#   You will use `shinyUI()` to render this variable (bottom of the script)
# Give the layout a title of "Income Inequality".
# The layout should include the following elements:
ui <- navbarPage("Income Inequality",
# A `tabPanel()` with a title "Introduction" to represent the first tab.
# This layout will contain the following elements:
tabPanel('Introduction',
# A `titlePanel()` with the text "Income Inequality"
titlePanel('Income Inequality'),
# A paragraph `p()` describing with the text: "The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."
p("The below diagram was created by the New York Times to illustrate the increasing level of inequality in the US."),
# An image `img()` to display. This content should have a `src` attribute of
# "inequality.png" (which will refer to the file in the `www/` folder).
img(src="inequality.png"),
# A paragraph containing a hyperlink `a()` to the source of the article at
# https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html
p(a(href="https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html", "(source)")),
# A paragraph containing a 1-2 sentence description of what the diagram
# shows. Your paragraph should include both `strong()` and emphasized `em()`
# text.
p("The graph shows how the richest 1% of people have seen their incomes jump",
strong("6%"),
"since 1980",
"while the bottom 60% have barely seen any increase",
em("(their income has")
),
p('Click on the "Growth Chart" tab to see an alternative interactive diagram.')
),
# The navbarPage layout should have a second `tabPanel()` titled "Growth Chart"
# This layout should contain the following elements:
tabPanel('Growth Chart',
# A `titlePanel()` with the text "Income growth 1980-2014"
titlePanel("Income growth 1980-2014"),
# A `sidebarLayout()` to create two columns.
# The sidebar layout will contain elements:
sidebarLayout(
# A `sidebarPanel()` layout to organize the side bar. The sidebar contains:
sidebarPanel(
# A sliderInput for the 'percentile' value, labeled "Income Percentile".
# This slider should let the user pick a range between 0 and 100
# See the documentation for details!
sliderInput('percentile', label = "Income Percentile", min = 0, max = 100, value = c(0, 100))
),
# The `sidebarLayout` also contains a `mainPanel()` for the main content.
# The `mainPanel` contains
mainPanel(
# A `plotOutput()` element showing the 'plot' output
plotOutput('plot'),
# A paragraph with a hyperlink to the data source http://gabriel-zucman.eu/usdina/
p("Source:", a(href="http://gabriel-zucman.eu/usdina/", "http://gabriel-zucman.eu/usdina/"))
)
)
)
)
# Remember to pass your `ui` to the `shinyUI()` function to create it!
shinyUI(ui)  # create the UI
# Exercise 3: Shiny widgets
# Load the shiny, ggplot2, and dplyr libraries
library(shiny)
library(ggplot2)
library(dplyr)
# You will once again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 3000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 3000)
# For convenience store the `range()` of values for the `price` and `carat`
# columns (of the ENTIRE diamonds dataset)
price_range <- range(diamonds$price)
carat_range <- range(diamonds$carat)
# Define a UI using a fluidPage layout
ui <- fluidPage(
# Include a `titlePanel` with the title "Diamond Viewer"
titlePanel("Diamond Viewer"),
# Include a `sidebarLayout()`
sidebarLayout(
# The layout's `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# A sliderInput labeled "Price (in dollars)". This slider should let the
# user pick a range between the minimum and maximum price of the entire
# diamond data set (e.g., the ranges you stored earlier)
sliderInput('price_choice', label="Price (in dollars)", min=price_range[1], max=price_range[2], value=price_range),
# A sliderInput labeled "Carats". This slider should let the user pick a
# range between the minimum and maximum carats of the entire data set
sliderInput('carat_choice', label="Carats", min=carat_range[1], max=carat_range[2], value=carat_range),
# A checkboxInput labeled "Show Trendline". It's default value is TRUE
checkboxInput('smooth', label=strong("Show Trendline"), value=TRUE),
# A slectInput labeled "Facet By", with choices "cut", "clarity" and "color"
selectInput('facet_by', label="Facet By", choices=c('cut', 'clarity', 'color'))
),
# The layout's `mainPanel()` should have the following reactive outputs:
mainPanel(
# A plotOutput showing the 'plot' output (based on the user specifications)
plotOutput('plot'),
# Bonus: a dataTableOutput showing a data table of relevant observations
dataTableOutput('table')
)
)
)
# Define a Server function for the app
server <- function(input, output) {
# reactive variable for shared data
filtered <- reactive({
data <- diamonds_sample %>%
filter(price > input$price_choice[1] & price < input$price_choice[2]) %>%
filter(carat > input$carat_choice[1] & carat < input$carat_choice[2])
return(data)
})
# Assign a reactive `renderPlot()` function to the outputted 'plot' value
output$plot <- renderPlot({
# This function should take the `diamonds_sample` data set and filter it by
# the input price and carat ranges.
# Hint: use dplyr and multiple `filter()` operations
# Use the filtered data set to create a ggplot2 scatter plot with the carat
# on the x-axis, the price on the y-axis, and color based on the clarity.
# Facet the plot based on which feature the user selected to "facet by"
#   (hint: you can just pass that string directly to `facet_wrap()`)
# Save your plot as a variable.
p <- ggplot(data = filtered(), mapping = aes(x = carat, y = price, color = cut)) +
geom_point() +
facet_wrap(input$facet_by)
# Finally, if the "trendline" checkbox is selected, you should also include
# a geom_smooth geometry (with `se=FALSE`)
# Hint: use an if statement to see if you need to add more geoms to the plot
# Be sure and return the completed plot!
if(input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
return(p)
})
# Bonus: Assign a reactive `renderDataTable()` function to the outputted table
# You may want to use a `reactive()` variable to avoid needing to filter the
# data twice!
output$table <- renderDataTable({
return(filtered())
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
setwd("~/Dropbox/Documents/Courses (UW)/Spring 2018/INFO 201/info201-final-project")
shiny::runApp()
library(shiny)
runApp()
library(ggplot2)
library(dplyr)
library(shiny)
>>>>>>> e9f6ca8c8c18078afa420b24530fb56b847d55ae
my_ui <- fluidPage(
titlePanel("Crimes Rates in the US"),
sidebarLayout(
sidebarPanel(
<<<<<<< HEAD
sliderInput("year_choice", label = "Range of years", min = year_range[1],
max = year_range[2],
value = year_range),
checkboxInput("smooth", label=strong("Show Trendline"), value=TRUE),
selectInput("data_by", label="Data By", choices=c("violent_crime",
"homicide","rape_legacy",
"rape_revised","robbery",
"aggravated_assault",
"poverty_crime","burglary",
"larceny","motor_vehicle_theft"))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot", click = "plot_click"),
tabPanel("Table", tableOutput("table"),
br(),
p()),
tabPanel("Plot", plotOutput("plot2")),
tabPanel("Plot", plotOutput("plot3")),
=======
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot1")),
tabPanel("Plot", plotOutput("plot2")),
tabPanel("Plot", plotOutput("plot3")),
tabPanel("DUI Against Various Theft Types", plotOutput("plot4"))
tabPanel("Plot", plotOutput("plot3"),
selectInput("select_year", h3("Select Year"), choices = list(
"1995" = 1995, "1996" = 1996, "1997" = 1997, "1998" = 1998,
"1999" = 1999, "2000" = 2000,
"2001" = 2001,"2002" = 2002, "2003" = 2003,
"2004"= 2004,"2005" = 2005, "2006" = 2006,
"2007" = 2007, "2008" = 2008, "2009" = 2009,
"2010" = 2010,"2011" = 2011, "2012" = 2012,
"2013" = 2013,"2014" = 2014,
"2015" = 2015,"2016" = 2016, selected = 2000)),
dataTableOutput("table"), textOutput("plot_info")),
>>>>>>> e9f6ca8c8c18078afa420b24530fb56b847d55ae
tabPanel("Plot", plotOutput("plot4"))
)
)
)
)
<<<<<<< HEAD
)
shinyUI(my_ui)
library(ggplot2)
library(dplyr)
library(shiny)
national <- read.csv("data/arrests_national.csv", stringsAsFactors = FALSE)
state_and_national <- read.csv("data/estimated_crimes.csv", stringsAsFactors = FALSE)
state <- state_and_national[23:1144,]
my_server <- function(input, output) {
filtered <- reactive({
data <- state %>%
filter(year > input$year_range[1] & year < input$year_range[2])
return(data)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x = state_abbr, y = population, color = year)) +
geom_point()
if(input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
return(p)
})
}
shinyServer(my_server)
library(shiny)
# Loaded the server R script.
source("server.R")
# Loaded the UI R script.
source("ui.R")
# Created shiny app using the source server and UI.
shinyApp(ui = my_ui, server = my_server)
runApp()
View(state)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
state_abbreviations <- unique(state$state_abbr,incomparables = FALSE)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
statistics <- group_by(state, state_abbr) %>%
summarize(
min_violent_crime = min(violent_crime, na.rm = TRUE),
average_violent_crime = mean(violent_crime, na.rm = TRUE),
median_violent_crime = median(violent_crime, na.rm = TRUE),
max_violent_crime = max(violent_crime, na.rm = TRUE),
min_homicide = min(homicide, na.rm = TRUE),
average_homicide = mean(homicide, na.rm = TRUE),
median_homicide = median(homicide, na.rm = TRUE),
max_homicide = max(homicide, na.rm = TRUE),
min_rape_legacy = min(rape_legacy, na.rm = TRUE),
average_rape_legacy = mean(rape_legacy, na.rm = TRUE),
median_rape_legacy = median(rape_legacy, na.rm = TRUE),
max_rape_legacy = max(rape_legacy, na.rm = TRUE),
min_rape_revised = min(rape_revised, na.rm = TRUE),
average_rape_revised = mean(rape_revised, na.rm = TRUE),
median_rape_revised = median(rape_revised, na.rm = TRUE),
max_rape_revised = max(rape_revised, na.rm = TRUE),
min_robbery = min(robbery, na.rm = TRUE),
average_robbery = mean(robbery, na.rm = TRUE),
median_robbery = median(robbery, na.rm = TRUE),
max_robbery = max(robbery, na.rm = TRUE),
min_aggravated_assault = min(aggravated_assault, na.rm = TRUE),
average_aggravated_assault = mean(aggravated_assault, na.rm = TRUE),
median_aggravated_assault = median(aggravated_assault, na.rm = TRUE),
max_aggravated_assault = max(aggravated_assault, na.rm = TRUE),
min_property_crime = min(property_crime, na.rm = TRUE),
average_property_crime = mean(property_crime, na.rm = TRUE),
median_property_crime = median(property_crime, na.rm = TRUE),
max_property_crime = max(property_crime, na.rm = TRUE),
min_burglary = min(burglary, na.rm = TRUE),
average_burglary = mean(burglary, na.rm = TRUE),
median_burglary = median(burglary, na.rm = TRUE),
max_burglary = max(burglary, na.rm = TRUE),
min_larceny = min(larceny, na.rm = TRUE),
average_larceny = mean(larceny, na.rm = TRUE),
median_larceny = median(larceny, na.rm = TRUE),
max_larceny = max(larceny, na.rm = TRUE),
min_motor_vehicle_theft = min(motor_vehicle_theft, na.rm = TRUE),
average_motor_vehicle_theft = mean(motor_vehicle_theft, na.rm = TRUE),
median_motor_vehicle_theft = median(motor_vehicle_theft, na.rm = TRUE),
max_motor_vehicle_theft = max(motor_vehicle_theft, na.rm = TRUE))
View(statistics)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(state)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
state[4]
mean(state[4], na.rm = TRUE)
meadian(state[4], na.rm = TRUE)
median(state[4], na.rm = TRUE)
min(state[5],na.rm = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
=======
runApp()
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyr)
national <- read.csv("data/arrests_national.csv")
national_arrests <- read.csv("data/arrests_national.csv")
state <- read.csv("data/estimated_crimes.csv")
crime_rates_national <- national %>%
select(year, population, total_arrests, dui, robbery,
burglary, larceny, motor_vehicle_theft, stolen_property)
my_server <- function(input, output) {
national_arrests <- national_arrests %>%
gather(key = "crime", value = "arrests", total_arrests : curfew_loitering) %>%
select(year, "crime", "arrests") %>%
arrange(arrests)
filtered <- reactive({
data_year <- national_arrests %>%
filter(year == input$select_year)
return(data_year)
})
output$plot3 <- renderPlot({
p<- ggplot(data = national_arrests, aes(x = year, y = arrests, fill = crime)) +
geom_bar(stat = "identity") +
labs(
title = "Number of Arrests in the US",
x = "Year",
y = "Number of Arrests",
fill = "Type of Crime"
)
return(p)
})
output$plot_info <- renderPrint({
cat(
"This plot shows the arrest records for the years 1995 - 2016. The types of arrests are stacked to show how each kind of
crime has progressed each year. Further statistics based on the specific year are found under this graph to look more in depth
of the yearly numbers. "
)
})
output$table <- renderDataTable({
return(filtered())
})
# How does statistics on drinking under the influence (DUI)
# compared to the rate of various types of thefts?
output$plot4 <- renderPlot({
ggplot(crime_rates_national, aes(x = year)) +
geom_line(aes(y = dui, color = "DUI")) +
geom_line(aes(y = motor_vehicle_theft, color = "Motor_Theft_Vehicle")) +
geom_line(aes(y = robbery, color = "Robbery")) +
geom_line(aes(y = burglary, color = "Burglary")) +
geom_line(aes(y = larceny, color = "Larceny")) +
geom_line(aes(y = stolen_property, color = "Stolen_Property")) +
scale_colour_manual(name = "Line Color",
values=c(DUI = "blue",
Motor_Theft_Vehicle = "grey",
Robbery = "orange",
Burglary = "red",
Larceny = "green",
Stolen_Property = "purple")) +
ylab(label = "Number of crimes") +
xlab("Year") +
ggtitle(paste("DUI Against Other Theft Crimes at the National Level")) +
theme(plot.title = element_text(size = 20,
face="bold",
vjust = 1,
lineheight = 0.8,
margin = margin(10, 0, 10, 0))) +
labs(caption = "The rate of driving under the influence (DUI) decreases
from 1995 to 2016 along with other type of thefts as well.
What is extremely evidential is that the numbers of DUI and larceny
crimes exceed that of crimes such as burglary, robbery, and etc.
Overall, there has been a decrease in the number of crimes from
1995 to 2016.
")
})
}
ggplot(crime_rates_national, aes(x = year)) +
geom_line(aes(y = dui, color = "DUI")) +
geom_line(aes(y = motor_vehicle_theft, color = "Motor_Theft_Vehicle")) +
geom_line(aes(y = robbery, color = "Robbery")) +
geom_line(aes(y = burglary, color = "Burglary")) +
geom_line(aes(y = larceny, color = "Larceny")) +
geom_line(aes(y = stolen_property, color = "Stolen_Property")) +
scale_colour_manual(name = "Line Color",
values=c(DUI = "blue",
Motor_Theft_Vehicle = "grey",
Robbery = "orange",
Burglary = "red",
Larceny = "green",
Stolen_Property = "purple")) +
ylab(label = "Number of crimes") +
xlab("Year") +
ggtitle(paste("DUI Against Other Theft Crimes at the National Level")) +
theme(plot.title = element_text(size = 20,
face="bold",
vjust = 1,
lineheight = 0.8,
margin = margin(10, 0, 10, 0))) +
labs(caption = "The rate of driving under the influence (DUI) decreases
from 1995 to 2016 along with other type of thefts as well.
What is extremely evidential is that the numbers of DUI and larceny
crimes exceed that of crimes such as burglary, robbery, and etc.
Overall, there has been a decrease in the number of crimes from
1995 to 2016.
")
>>>>>>> e9f6ca8c8c18078afa420b24530fb56b847d55ae
runApp()
runApp()
runApp()
